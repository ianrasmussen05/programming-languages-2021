#!/bin/zsh

# Automatic Tests for Assignment 2
    echo -e "\e[36m================================================================================\e[0m"
    echo -e "\e[36m================================================================================\e[0m"
    echo -e "\e[36m================================================================================\e[0m"
## Test LambdaNat1
cd LambdaNat1
cd grammar
    echo "bnfc -m --haskell LambdaNat1.cf" 
bnfc -m --haskell LambdaNat1.cf # > /dev/null
make # > /dev/null
cd .. 
cp grammar/*.hs src ; 
stack build # > /dev/null
    echo -e "\e[31m================================================================================\e[0m"
echo "(\ x. S x) S S 0" 
echo "(\ x. S x) S S 0" | stack exec LambdaNat-exe
    echo -e "\e[31m================================================================================\e[0m"
echo "(\ x. \y. S x y) S S 0" 
echo "(\ x. \y. S x y) S S 0" | stack exec LambdaNat-exe
cd ..

    echo -e "\e[36m================================================================================\e[0m"
    echo -e "\e[36m LambdaNat3 \e[0m"
    echo -e "\e[36m================================================================================\e[0m"
## Test LambdaNat3
cd LambdaNat3
cd grammar
    echo "bnfc -m --haskell LambdaNat3.cf" 
bnfc -m --haskell LambdaNat3.cf # > /dev/null
make # > /dev/null
cd .. 
cp grammar/*.hs src ; 
stack build # > /dev/null
    echo -e "\e[31m================================================================================\e[0m"
echo "x"
echo "x" | stack exec LambdaNat-exe
    echo -e "\e[31m================================================================================\e[0m"
echo "let x = S 0 in x"
echo "let x = S 0 in x" | stack exec LambdaNat-exe
    echo -e "\e[31m================================================================================\e[0m"
echo "let x = S 0 in let y = 0 in y x"
echo "let x = S 0 in let y = 0 in y x" | stack exec LambdaNat-exe
    echo -e "\e[31m================================================================================\e[0m"
echo "let x = S 0 in if minus_one x = 0 then left else right"
echo "let x = S 0 in if minus_one x = 0 then left else right" | stack exec LambdaNat-exe
    echo -e "\e[31m================================================================================\e[0m"
echo "let x = S 0 in if x=0 then left else right" 
echo "let x = S 0 in if x=0 then left else right" | stack exec LambdaNat-exe
    echo -e "\e[31m================================================================================\e[0m"
echo "let rec f = \ x. if x=0 then 0 else S(f(minus_one x)) in f (S (S 0))" 
echo "let rec f = \ x. if x=0 then 0 else S(f(minus_one x)) in f (S (S 0))" | stack exec LambdaNat-exe
cd ..

    echo -e "\e[36m================================================================================\e[0m"
    echo -e "\e[36m LambdaNat5 \e[0m"
    echo -e "\e[36m================================================================================\e[0m"
## Test LambdaNat5
cd LambdaNat5
cd grammar
    echo -e "\e[31mbnfc -m --haskell LambdaNat5.cf\e[0m"
bnfc -m --haskell LambdaNat5.cf 
    echo -e "\e[31mmake\e[0m"
make 
cd .. 
cp grammar/*.hs src ; 
    echo -e "\e[31mstack build\e[0m"
stack build
#    echo -e "\e[31m================================================================================\e[0m"
# stack exec LambdaNat-exe test/test.lc
    echo -e "\e[31m================================================================================\e[0m"
stack exec LambdaNat-exe test/solutions.lc
    echo -e "\e[31m================================================================================\e[0m"
cd ..



